name: Enterprise CI/CD

on:
  push:
    branches: [feature/enterprise-cicd]
  release:
    types: [published]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/todo-api

jobs:
  code-quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run linter
        run: npm run lint || true   # fail â†’ warning
      - name: SAST Security Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          severity: CRITICAL,HIGH
          exit-code: 1
          ignore-unfixed: true

  test:
    runs-on: ubuntu-latest
    needs: code-quality
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run tests with coverage
        run: |
          npm run test -- --coverage \
            --coverageThreshold='{"global": {"branches": 20, "functions": 20, "lines": 20, "statements": 20}}'

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Push Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} ./backend
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  load-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install k6
        uses: grafana/k6-action@v0.3.0
        with:
          install_deps: true
      - name: Run load test
        run: |
          k6 run --vus 10 --duration 30s ./load-test/script.js || echo "Load test completed"
        working-directory: ./backend

  performance-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Run container
        run: |
          docker run -d -p 5000:5000 --name todo-api $IMAGE_NAME:latest
          sleep 5
      - name: Performance Test (P95 < 200ms)
        run: |
          npm install -g k6
          k6 run perf-tests/p95.js
      - name: Cleanup
        run: docker rm -f todo-api

  container-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          severity: CRITICAL,HIGH
          exit-code: 1

  deploy-to-staging:
    runs-on: self-hosted
    needs: [performance-test, container-scan]
    steps:
      - name: Deploy via docker compose
        run: |
          docker compose -f docker-compose.staging.yml pull
          docker compose -f docker-compose.staging.yml up -d

  staging-smoke-tests:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    steps:
      - name: Smoke Tests
        run: |
          curl -f http://staging-host:5000/health
          curl -f http://staging-host:5000/tasks
          curl -X POST -H "Content-Type: application/json" \
               -d '{"title":"test"}' http://staging-host:5000/tasks

  deploy-to-prod:
    runs-on: self-hosted
    needs: staging-smoke-tests
    if: success()
    steps:
      - name: Deploy via docker compose
        run: |
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d

  rollback:
    runs-on: self-hosted
    if: failure() && (needs.staging-smoke-tests.result == 'failure' || needs.performance-test.result == 'failure')
    steps:
      - name: Rollback to previous version
        run: |
          echo "Rolling back to previous stable version..."
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d
