networks:
  blog-network:
    driver: bridge

volumes:
  db-data:

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - blog-network

  backend:
    image: ${DOCKER_USERNAME}/todo-backend:${RELEASE_VERSION}
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      RELEASE_VERSION: ${RELEASE_VERSION}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5000/health >/dev/null || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - blog-network

  frontend:
    image: ${DOCKER_USERNAME}/todo-frontend:${RELEASE_VERSION}
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "3000:80"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 6
    networks:
      - blog-network

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    ports:
      - "8090:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/health >/dev/null || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 6
    networks:
      - blog-network
